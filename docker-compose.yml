services:
  db:
    build:
      context: .
      dockerfile: Dockerfile.postgres  # ðŸ”¥ S'assurer que ce fichier existe
    image: mon-postgres
    container_name: db-container
    restart: always
    environment:
      POSTGRES_DB: monapi
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - db-data:/var/lib/postgresql/data  # ðŸ”¥ Sauvegarde les donnÃ©es PostgreSQL
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5
      start_period: 10s

  api:
    build:
      context: .
      dockerfile: Dockerfile  # ðŸ”¥ Assure-toi que ce fichier existe
    image: mon-api
    container_name: api-container
    depends_on:
      db:
        condition: service_healthy  # ðŸ”¥ Attendre que PostgreSQL soit prÃªt avant de dÃ©marrer
    environment:
      - ConnectionStrings__DefaultConnection=Host=db-container;Port=5432;Database=monapi;Username=postgres;Password=postgres
    ports:
      - "8080:8080"
    networks:
      - app-network
    volumes:
      - api-logs:/app/logs  # ðŸ”¥ Sauvegarde les logs de lâ€™API

  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx  # ðŸ”¥ S'assurer que ce fichier existe
    image: mon-nginx
    container_name: nginx-container
    depends_on:
      - api
    ports:
      - "80:80"
    networks:
      - app-network
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro  # ðŸ”¥ Charge la configuration de Nginx
      - nginx-logs:/var/log/nginx  # ðŸ”¥ Stocke les logs de Nginx

networks:
  app-network:
    driver: bridge

volumes:
  db-data:  # ðŸ”¥ Volume pour stocker les donnÃ©es PostgreSQL
  api-logs:  # ðŸ”¥ Volume pour stocker les logs de l'API
  nginx-logs:  # ðŸ”¥ Volume pour stocker les logs de Nginx






































# services:
#   db:
#     build:
#       context: .
#       dockerfile: Dockerfile.postgres  # ðŸ”¥ S'assurer que ce fichier existe
#     image: mon-postgres
#     container_name: db-container
#     restart: always
#     environment:
#       POSTGRES_DB: monapi
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: postgres
#     ports:
#       - "5432:5432"
#     networks:
#       - app-network
#     healthcheck:   # ðŸ”¥ VÃ©rifie que PostgreSQL est prÃªt avant que l'API dÃ©marre
#       test: ["CMD", "pg_isready", "-U", "postgres"]
#       interval: 5s
#       retries: 5
#       start_period: 10s

#   api:
#     build:
#       context: .
#       dockerfile: Dockerfile  # ðŸ”¥ Assure-toi que ce fichier existe
#     image: mon-api
#     container_name: api-container
#     depends_on:
#       db:
#         condition: service_healthy  # ðŸ”¥ Attendre que PostgreSQL soit prÃªt avant de dÃ©marrer
#     environment:
#       - ConnectionStrings__DefaultConnection=Host=db-container;Port=5432;Database=monapi;Username=postgres;Password=postgres
#     ports:
#       - "8080:8080"
#     networks:
#       - app-network

#   nginx:
#     build:
#       context: .
#       dockerfile: Dockerfile.nginx  # ðŸ”¥ S'assurer que ce fichier existe
#     image: mon-nginx
#     container_name: nginx-container
#     depends_on:
#       - api
#     ports:
#       - "80:80"
#     networks:
#       - app-network
#     volumes:
#       - ./nginx.conf:/etc/nginx/nginx.conf:ro

# networks:
#   app-network:
#     driver: bridge















































# services:
#   db:
#     build: 
#       context: .
#       dockerfile: Dockerfile.postgres
#     image: mon-postgres  # CrÃ©ation de l'image PostgreSQL
#     container_name: db-container
#     restart: always
#     environment:
#       POSTGRES_DB: monapi
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: postgres
#     ports:
#       - "5432:5432"
#     networks:
#       - app-network

#   api:
#     build: 
#       context: .
#       dockerfile: Dockerfile
#     image: mon-api  # CrÃ©ation de l'image de l'API
#     container_name: api-container
#     depends_on:
#       - db:
#           condition: service_healthy
#     environment:
#       - ConnectionStrings__DefaultConnection=Host=db-container;Port=5432;Database=monapi;Username=postgres;Password=postgres
#     ports:
#       - "8080:8080"
#     networks:
#       - app-network

#   nginx:
#     build: 
#       context: .
#       dockerfile: Dockerfile.nginx
#     image: mon-nginx  # CrÃ©ation de l'image Nginx
#     container_name: nginx-container
#     depends_on:
#       - api  
#     ports:
#       - "80:80"
#     networks:
#       - app-network

# networks:
#   app-network:
#     driver: bridge
